{"version":3,"sources":["components/Body.js","App.js","serviceWorker.js","index.js"],"names":["Body","props","basicChange","event","setState","basicData","target","value","modifierChange","modifierData","parseInt","mailServiceChange","mailServiceData","generateCredential","state","data","email","pass","makePass","length","text","char_list","i","charAt","Math","floor","random","makePathID","generatedResult","this","className","onChange","type","placeholder","accesskey","onClick","reverse","map","obj","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAEqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAWVC,YAAc,SAACC,GACX,EAAKC,SAAS,CACVC,UAAWF,EAAMG,OAAOC,SAdb,EAkBnBC,eAAiB,SAACL,GACd,EAAKC,SAAS,CACVK,aAAcC,SAASP,EAAMG,OAAOC,MAAO,OApBhC,EAwBnBI,kBAAoB,SAACR,GACjB,EAAKC,SAAS,CACVQ,gBAAiBT,EAAMG,OAAOC,SA1BnB,EA8BnBM,mBAAqB,WACjB,EAAKT,UAAS,SAAAU,GAAK,MAAK,CACpBL,aAAc,EAAKK,MAAML,aAAe,EACxCM,KAAK,GAAD,mBAAMD,EAAMC,MAAZ,CAAkB,CAClBC,MAAO,EAAKF,MAAMT,UAAY,EAAKS,MAAML,aAAe,IAAM,EAAKK,MAAMF,gBACzEK,KAAM,EAAKC,mBAnCJ,EAwCnBA,SAAW,WASP,OARmB,SAACC,GAGhB,IAFA,IAAIC,EAAO,GACLC,EAAY,iEACTC,EAAI,EAAGA,EAAIH,EAAQG,IACxBF,GAAQC,EAAUE,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,EAAUF,SAElE,OAAOC,EAEJO,CAAW,KA9ClB,EAAKb,MAAQ,CACTT,UAAW,OACXI,aAAc,EACdG,gBAAiB,YACjBgB,gBAAiB,GACjBb,KAAM,IARK,E,qDAoDT,IACEA,EAASc,KAAKf,MAAdC,KACR,OACI,yBAAKe,UAAU,OACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBAAoB,2BAAOC,SAAUF,KAAK3B,YAAa8B,KAAK,OAAOC,YAAY,yCAC9F,yBAAKH,UAAU,wBAAuB,2BAAOC,SAAUF,KAAKrB,eAAgBwB,KAAK,OAAOC,YAAY,6CACpG,yBAAKH,UAAU,0BAAyB,wCACxC,yBAAKA,UAAU,4BAA2B,2BAAOC,SAAUF,KAAKlB,kBAAmBqB,KAAK,OAAOC,YAAY,mDAC3G,yBAAKH,UAAU,sBAAqB,4BAAQI,UAAU,IAAIC,QAASN,KAAKhB,mBAAoBmB,KAAK,UAA7D,sBAExC,yBAAKF,UAAU,kBAGf,yBAAKA,UAAU,aACX,yBAAKA,UAAU,uBAAsB,8CACrC,yBAAKA,UAAU,4BAEPf,EAAKI,OAASJ,EAAKqB,UAAUC,KAAI,SAACC,GAC9B,OAAO,2BAAIA,EAAItB,MAAR,MAAkBsB,EAAIrB,SAC5B,4C,GA1EHsB,aCYnBC,MATf,WAEE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.eb2bcab5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Body extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            basicData: \"lion\",\n            modifierData: 1,\n            mailServiceData: \"gmail.com\",\n            generatedResult: \"\",\n            data: []\n        }\n    }\n\n    basicChange = (event) => {\n        this.setState({\n            basicData: event.target.value\n        })\n    }\n\n    modifierChange = (event) => {\n        this.setState({\n            modifierData: parseInt(event.target.value, 10)\n        })\n    }\n\n    mailServiceChange = (event) => {\n        this.setState({\n            mailServiceData: event.target.value\n        })\n    }\n    \n    generateCredential = () => {\n        this.setState(state => ({\n            modifierData: this.state.modifierData + 1,\n            data: [...state.data, {\n                email: this.state.basicData + this.state.modifierData + \"@\" + this.state.mailServiceData,\n                pass: this.makePass(),\n            }]\n        }))\n    }\n\n    makePass = () => {\n        const makePathID = (length) => {\n            let text = \"\";\n            const char_list = \"ABCDEFGHIJKLMNOQRSTPUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n            for (let i = 0; i < length; i++) {\n                text += char_list.charAt(Math.floor(Math.random() * char_list.length));\n            }\n            return text;\n        }\n        return makePathID(12)\n    }\n\n    render() {\n        const { data } = this.state\n        return (\n            <div className=\"App\">\n                <div className=\"body\">\n                    <div className=\"body-input\">\n                        <div className=\"body-input__basic\"><input onChange={this.basicChange} type=\"text\" placeholder='Enter mailbox name. Example: \"Alex\"' /></div>\n                        <div className=\"body-input__modifier\"><input onChange={this.modifierChange} type=\"text\" placeholder='Enter the number modifier. Example: \"1\"' /></div>\n                        <div className=\"body-input__specSumbol\"><h1> + @ + </h1></div>\n                        <div className=\"body-input__mail-service\"><input onChange={this.mailServiceChange} type=\"text\" placeholder='Enter mail service name. Example: \"gmail.com\"' /></div>\n                        <div className=\"body-input__button\"><button accesskey=\"a\" onClick={this.generateCredential} type=\"submit\">generate (alt+a)</button></div>\n                    </div>\n                    <div className=\"body-settings\">\n                      \n                    </div>\n                    <div className=\"body-list\">\n                        <div className=\"body-list__headline\"><p>Generated list</p></div>\n                        <div className=\"body-list__generate-list\">\n                            {\n                                data.length ? data.reverse().map((obj) => {\n                                    return <p>{obj.email} - {obj.pass}</p>\n                                }) : <p>empty</p>\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div >\n        )\n    }\n}","import React from 'react';\nimport './App.css';\n\nimport Body from './components/Body'\n\nfunction App() {\n\n  return (\n    <div>\n      <Body />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}